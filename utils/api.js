/**
 * AIÁñóÊÑàÁ≥ªÁªü APIËØ∑Ê±ÇÂ∞ÅË£Ö
 */

const app = getApp()
const { getApiBaseUrl, getTimeout, getRetryCount, isDebug, useMock } = require('./config')
const networkManager = require('./networkManager')
const AuthService = require('../services/AuthService')
const { responseInterceptor, errorInterceptor, standardizeHttpError } = require('./responseFormatter')
const { requiresAuth, isPublicApi } = require('./apiClassifier')

// APIÂü∫Á°ÄÈÖçÁΩÆÔºàÂä®ÊÄÅÊõ¥Êñ∞Ôºâ
let API_CONFIG = {
  baseUrl: getApiBaseUrl(),
  timeout: getTimeout(),
  retryCount: getRetryCount()
}

// Âº∫Âà∂Âà∑Êñ∞APIÈÖçÁΩÆ
function refreshApiConfig() {
  API_CONFIG = {
    baseUrl: getApiBaseUrl(),
    timeout: getTimeout(),
    retryCount: getRetryCount()
  }
  console.log('APIÈÖçÁΩÆÂ∑≤Âà∑Êñ∞:', API_CONFIG)
  return API_CONFIG
}

/**
 * ÈÄöÁî®ËØ∑Ê±ÇÊñπÊ≥ï
 */
function request(options) {
  return new Promise(async (resolve, reject) => {
    const {
      url,
      method = 'GET',
      data = {},
      header = {},
      timeout = API_CONFIG.timeout,
      showLoading = true,
      loadingText = 'ËØ∑Ê±Ç‰∏≠...'
    } = options

    // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
    if (showLoading) {
      wx.showLoading({
        title: loadingText,
        mask: true
      })
    }

    // Á°Æ‰øù‰ΩøÁî®ÊúÄÊñ∞ÈÖçÁΩÆ
    refreshApiConfig()
    
    // ËØ¶ÁªÜÁöÑURLÊ£ÄÊü•ÂíåË∞ÉËØï
    console.log('üîç APIËØ∑Ê±ÇËØ¶ÁªÜË∞ÉËØï:', {
      ‰º†ÂÖ•ÁöÑurl: url,
      urlÁ±ªÂûã: typeof url,
      urlÈïøÂ∫¶: url ? url.length : 'undefined',
      baseUrl: API_CONFIG.baseUrl,
      baseUrlÁ±ªÂûã: typeof API_CONFIG.baseUrl,
      method: method,
      data: data,
      getApiBaseUrlÁªìÊûú: getApiBaseUrl()
    })

    // ÊûÑÂª∫ÂÆåÊï¥URLÂâçÁöÑÊ£ÄÊü•
    if (!url) {
      console.error('‚ùå URLÂèÇÊï∞‰∏∫Á©∫!', {
        urlÂèÇÊï∞: url,
        optionsÂØπË±°: options,
        Ë∞ÉÁî®Ê†à: new Error().stack
      })
      reject(new Error('ËØ∑Ê±ÇURL‰∏çËÉΩ‰∏∫Á©∫'))
      return
    }

    if (!API_CONFIG.baseUrl) {
      console.error('‚ùå baseUrlÈÖçÁΩÆ‰∏∫Á©∫!', {
        API_CONFIG: API_CONFIG,
        getApiBaseUrl: getApiBaseUrl()
      })
      reject(new Error('APIÂü∫Á°ÄÂú∞ÂùÄÈÖçÁΩÆÈîôËØØ'))
      return
    }

    const fullUrl = url.startsWith('http') ? url : `${API_CONFIG.baseUrl}${url}`
    console.log('‚úÖ ÂÆåÊï¥ËØ∑Ê±ÇURL:', fullUrl)

    // ËÆæÁΩÆËØ∑Ê±ÇÂ§¥
    const requestHeader = {
      'Content-Type': 'application/json',
      ...header
    }

    // Ê†πÊçÆAPIÁ±ªÂûãÂÜ≥ÂÆöÊòØÂê¶Ê∑ªÂä†ËÆ§ËØÅÂ§¥
    let finalHeader = requestHeader
    if (requiresAuth(url)) {
      // Âè™ÊúâÈúÄË¶ÅËÆ§ËØÅÁöÑAPIÊâçÊ∑ªÂä†ËÆ§ËØÅÂ§¥
      try {
        finalHeader = await AuthService.addAuthHeader(requestHeader)
        console.log('‚úÖ ‰∏∫ËÆ§ËØÅAPIÊ∑ªÂä†‰∫ÜËÆ§ËØÅÂ§¥:', url)
      } catch (error) {
        console.warn('‚ö†Ô∏è ËÆ§ËØÅAPIÊó†Ê≥ïËé∑ÂèñËÆ§ËØÅÂ§¥:', url, error.message)
        // ËÆ§ËØÅÂ§±Ë¥•Êó∂‰ªçÁÑ∂‰ΩøÁî®ÂéüÂßãheaderÔºåËÆ©ÂêéÁ´ØËøîÂõû401
        finalHeader = requestHeader
      }
    } else {
      console.log('üìñ ÂÖ¨ÂºÄAPIÔºåÊó†ÈúÄËÆ§ËØÅÂ§¥:', url)
      finalHeader = requestHeader
    }

    // ‰ΩøÁî®ÁΩëÁªúÁÆ°ÁêÜÂô®ÂèëÈÄÅËØ∑Ê±Ç
    networkManager.request({
      url: fullUrl,
      method: method,
      data: data,
      header: finalHeader,
      timeout: timeout
    }).then((res) => {
      if (showLoading) {
        wx.hideLoading()
      }

      // Ê£ÄÊü•HTTPÁä∂ÊÄÅÁ†Å
      if (res.statusCode >= 200 && res.statusCode < 300) {
          // ‰ΩøÁî®ÂìçÂ∫îÊã¶Êà™Âô®Ê†áÂáÜÂåñÂìçÂ∫î
          const standardResponse = responseInterceptor(res.data, { 
            debug: isDebug(),
            autoFormat: true 
          })
          
          // Ê£ÄÊü•‰∏öÂä°Áä∂ÊÄÅÁ†Å
          if (standardResponse.success) {
            resolve(standardResponse)
          } else {
            const standardError = errorInterceptor(
              new Error(standardResponse.error || 'ËØ∑Ê±ÇÂ§±Ë¥•'), 
              { logErrors: true }
            )
            reject(standardError)
          }
        } else {
          // Ê£ÄÊü•ÊòØÂê¶ÊòØËÆ§ËØÅÈîôËØØ
          if (res.statusCode === 401) {
            // 401 Áªü‰∏Ä‰∫§Áªô AuthService Â§ÑÁêÜÈÄÄÂá∫Âπ∂ÈáçÂÆöÂêë
            AuthService.logout()
            wx.showModal({
              title: 'ËØ∑ÂÖàÁôªÂΩï',
              content: 'ÈúÄË¶ÅÁôªÂΩïÂêéÊâçËÉΩ‰ΩøÁî®Ê≠§ÂäüËÉΩ',
              showCancel: true,
              cancelText: 'ÂèñÊ∂à',
              confirmText: 'ÂéªÁôªÂΩï',
              success: (modalRes) => {
                if (modalRes.confirm) {
                  wx.navigateTo({ url: '/pages/login/login' })
                }
              }
            })
            reject({
              statusCode: 401,
              error: 'ÈúÄË¶ÅÁôªÂΩï',
              message: 'ËØ∑ÂÖàÁôªÂΩïË¥¶Êà∑'
            })
            return
          }

          // ‰ΩøÁî®Ê†áÂáÜÂåñHTTPÈîôËØØÂ§ÑÁêÜ
          const httpError = standardizeHttpError(res.statusCode, res.data?.error || res.data?.message)
          reject(httpError)
        }
      }).catch((err) => {
        if (showLoading) {
          wx.hideLoading()
        }

        console.error('APIËØ∑Ê±ÇÂ§±Ë¥•:', err)
        console.error('ËØ∑Ê±ÇËØ¶ÊÉÖ:', {
          url: fullUrl,
          method: method,
          data: data,
          error: err
        })

        // ‰ΩøÁî®Ê†áÂáÜÂåñÈîôËØØÂ§ÑÁêÜ
        const networkError = errorInterceptor(err, { 
          logErrors: true,
          showToast: false 
        })
        
        reject(networkError)
      })
  })
}

/**
 * GETËØ∑Ê±Ç
 */
function get(url, params = {}, options = {}) {
  // ÊûÑÂª∫Êü•ËØ¢Â≠óÁ¨¶‰∏≤
  const queryString = Object.keys(params)
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
    .join('&')
  
  const fullUrl = queryString ? `${url}?${queryString}` : url

  return request({
    url: fullUrl,
    method: 'GET',
    ...options
  })
}

/**
 * POSTËØ∑Ê±Ç
 */
function post(url, data = {}, options = {}) {
  return request({
    url: url,
    method: 'POST',
    data: data,
    ...options
  })
}

/**
 * PUTËØ∑Ê±Ç
 */
function put(url, data = {}, options = {}) {
  return request({
    url: url,
    method: 'PUT',
    data: data,
    ...options
  })
}

/**
 * DELETEËØ∑Ê±Ç
 */
function del(url, options = {}) {
  return request({
    url: url,
    method: 'DELETE',
    ...options
  })
}

/**
 * ‰∏ãËΩΩÊñá‰ª∂
 */
function downloadFile(url, options = {}) {
  return new Promise((resolve, reject) => {
    const {
      showLoading = true,
      loadingText = '‰∏ãËΩΩ‰∏≠...'
    } = options

    if (showLoading) {
      wx.showLoading({
        title: loadingText,
        mask: true
      })
    }

    // ÊûÑÂª∫ÂÆåÊï¥URL
    if (!url) {
      throw new Error('‰∏ãËΩΩURL‰∏çËÉΩ‰∏∫Á©∫')
    }
    const fullUrl = url.startsWith('http') ? url : `${API_CONFIG.baseUrl}${url}`

    wx.downloadFile({
      url: fullUrl,
      success: (res) => {
        if (showLoading) {
          wx.hideLoading()
        }

        if (res.statusCode === 200) {
          resolve(res)
        } else {
          const error = new Error(`‰∏ãËΩΩÂ§±Ë¥•: ${res.statusCode}`)
          error.statusCode = res.statusCode
          reject(error)
        }
      },
      fail: (err) => {
        if (showLoading) {
          wx.hideLoading()
        }

        const error = new Error(err.errMsg || '‰∏ãËΩΩÂ§±Ë¥•')
        error.originalError = err
        reject(error)
      }
    })
  })
}

/**
 * ÈîôËØØÂ§ÑÁêÜ
 */
function handleError(error, showToast = true) {
  console.error('APIËØ∑Ê±ÇÈîôËØØ:', error)

  let message = 'ËØ∑Ê±ÇÂ§±Ë¥•'

  if (error.code === 'NETWORK_ERROR') {
    message = 'ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ'
  } else if (error.code === 'HTTP_ERROR') {
    if (error.statusCode === 404) {
      message = 'ËØ∑Ê±ÇÁöÑËµÑÊ∫ê‰∏çÂ≠òÂú®'
    } else if (error.statusCode === 500) {
      message = 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ'
    } else {
      message = `ËØ∑Ê±ÇÂ§±Ë¥• (${error.statusCode})`
    }
  } else if (error.code === 'BUSINESS_ERROR') {
    message = error.message || '‰∏öÂä°Â§ÑÁêÜÂ§±Ë¥•'
  } else {
    message = error.message || 'Êú™Áü•ÈîôËØØ'
  }

  if (showToast) {
    wx.showToast({
      title: message,
      icon: 'error',
      duration: 3000
    })
  }

  return message
}

/**
 * ÈáçËØïËØ∑Ê±Ç
 */
function retryRequest(requestFn, maxRetries = API_CONFIG.retryCount) {
  return new Promise((resolve, reject) => {
    let retryCount = 0

    function attemptRequest() {
      requestFn()
        .then(resolve)
        .catch((error) => {
          retryCount++
          
          if (retryCount < maxRetries && error.code === 'NETWORK_ERROR') {
            console.log(`ËØ∑Ê±ÇÂ§±Ë¥•ÔºåÊ≠£Âú®ÈáçËØï (${retryCount}/${maxRetries})`)
            setTimeout(attemptRequest, 1000 * retryCount) // ÈÄíÂ¢ûÂª∂Ëøü
          } else {
            reject(error)
          }
        })
    }

    attemptRequest()
  })
}

/**
 * Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅ
 */
function checkNetworkStatus() {
  return new Promise((resolve) => {
    wx.getNetworkType({
      success: (res) => {
        const networkType = res.networkType
        const isConnected = networkType !== 'none'
        
        resolve({
          isConnected,
          networkType,
          isWifi: networkType === 'wifi',
          isMobile: ['2g', '3g', '4g', '5g'].includes(networkType)
        })
      },
      fail: () => {
        resolve({
          isConnected: false,
          networkType: 'unknown'
        })
      }
    })
  })
}

/**
 * ËÆæÁΩÆAPIÂü∫Á°ÄURL
 */
function setBaseUrl(baseUrl) {
  API_CONFIG.baseUrl = baseUrl
}

/**
 * Ëé∑ÂèñAPIÂü∫Á°ÄURL
 */
function getBaseUrl() {
  return API_CONFIG.baseUrl
}

module.exports = {
  request,
  get,
  post,
  put,
  del,
  downloadFile,
  refreshApiConfig,
  handleError,
  retryRequest,
  checkNetworkStatus,
  setBaseUrl,
  getBaseUrl,
  API_CONFIG
}
